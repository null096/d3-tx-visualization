{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["h","w","SHAPE_SIZE","MAX_DATA_SIZE","App","state","socketStatus","txHashRef","React","createRef","data","componentDidMount","_this","openConnection","createSimulation","centerX","centerY","svg","d3","append","attr","node","selectAll","bubbleSimulation","force","strength","d","i","scaledValue","alphaTarget","on","onBubblesTick","bubblesRestart","x","y","updateSelection","id","exit","remove","enterSelection","enter","Math","min","value","merge","nodes","alpha","restart","addTransaction","e","tx","JSON","parse","op","out","reduce","s","pow","log","hash","push","length","shift","current","innerText","concat","ws","WebSocket","onopen","setState","onmessage","closeConnection","readyState","OPEN","close","start","send","end","componentWillUnmount","react_default","a","createElement","Fragment","onClick","this","ref","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.974e55a0.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport * as d3 from 'd3';\n\nconst h = 600;\nconst w = 700;\nconst SHAPE_SIZE = 2;\nconst MAX_DATA_SIZE = 400;\n\nclass App extends Component {\n  state = {\n    socketStatus: 'Connecting...'\n  };\n\n  txHashRef = React.createRef();\n  data = [];\n\n  componentDidMount = () => {\n    this.openConnection();\n    this.createSimulation();\n  }\n\n  createSimulation = () => {\n    const centerX = w / 2;\n    const centerY = h / 2;\n\n    this.svg = d3.select('#node')\n      .append('svg')\n      .attr('width', w)\n      .attr('height', h)\n      .attr('class', 'simulation');\n\n    this.node = this.svg.append('g')\n      .selectAll('circle');\n\n    this.bubbleSimulation = d3.forceSimulation(this.data)\n      .force('charge', d3.forceManyBody().strength(-3))\n      .force('x', d3.forceX())\n      .force('y', d3.forceY())\n      .force('collision', d3.forceCollide((d, i) => d.scaledValue * SHAPE_SIZE))\n      .alphaTarget(1)\n      .on('tick', () => this.onBubblesTick(centerX, centerY));\n\n    this.bubblesRestart();\n  }\n\n  onBubblesTick = (centerX, centerY) => {\n    this.node\n      .attr('cx', (d) => d.x + centerX)\n      .attr('cy', (d) => d.y + centerY);\n  }\n\n  bubblesRestart = () => {\n    const updateSelection = this.node.data(this.data, (d) => d.id); //updated transactions\n    updateSelection.exit().remove(); //removed transactions\n    const enterSelection = updateSelection.enter()\n      .append('circle')\n      .attr('r', (d) => d.scaledValue * SHAPE_SIZE)\n      .attr('fill', (d) => d3.hsl(180 + Math.min(d.value * 4, 180), 1, 0.5)); //new transactions\n    this.node = updateSelection.merge(enterSelection);\n    this.bubbleSimulation.nodes(this.data);\n    this.bubbleSimulation.alpha(1).restart();\n  }\n\n  addTransaction = (e) => {\n    const tx = JSON.parse(e.data);\n\n    if (tx.op !== 'utx') return;\n\n    const value = tx.x.out.reduce((s, e) => s + e.value / 10 ** 8, 0);\n    const scaledValue = 5 + Math.log(value);\n    const id = tx.x.hash;\n\n    this.data.push({\n      value,\n      scaledValue,\n      id\n    });\n\n    if (this.data.length > MAX_DATA_SIZE) {\n      this.data.shift();\n    }\n\n    this.txHashRef.current.innerText = `tx: ${id}`;\n    this.bubblesRestart();\n  }\n\n  openConnection = () => {\n    this.ws = new WebSocket('wss://ws.blockchain.info/inv');\n    this.ws.onopen = () => { this.setState({ socketStatus: 'Connected' }); };\n    this.ws.onmessage = this.addTransaction;\n  }\n\n  closeConnection = () => {\n    if (this.ws.readyState === this.ws.OPEN) {\n      this.ws.close();\n    }\n  }\n\n  start = () => {\n    this.ws.send('{\"op\":\"unconfirmed_sub\"}');\n  }\n\n  end = () => {\n    this.ws.send('{\"op\":\"unconfirmed_unsub\"}');\n  }\n\n  componentWillUnmount = () => {\n    this.closeConnection();\n  }\n\n  render() {\n    return (\n      <>\n        <button onClick={this.start}>Start</button>\n        <button onClick={this.end}>Stop</button>\n        <span> {this.state.socketStatus}</span>\n        <p ref={this.txHashRef}></p>\n        <div id=\"node\"></div>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './main.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}